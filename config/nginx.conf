user  nginx;
worker_processes  auto;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    server_tokens off;
    include /etc/nginx/conf.d/*.conf;

    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=strict:10m  rate=1r/s;

    # Log format
    map $http_x_forwarded_for $real_client_ip {
        ""      $remote_addr;
        default $http_x_forwarded_for;
    }

    log_format webalizer '$real_client_ip - $remote_user [$time_local] "$request" '
                         '$status $body_bytes_sent "$http_referer" "$http_user_agent"';

    access_log /var/log/nginx/access.log webalizer;
    error_log /var/log/nginx/error.log warn;

    real_ip_header X-Forwarded-For;
    set_real_ip_from 127.0.0.1;
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 172.16.0.0/12;
#    set_real_ip_from 192.168.0.0/16;

    # Basic settings
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml;


    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.php index.html index.htm;

        include /etc/nginx/bots.d/blockbots.conf;
        include /etc/nginx/bots.d/ddos.conf;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Block requests with suspicious patterns (excluding .php for legitimate use)
        if ($request_uri ~* (\.asp|\.jsp|wp-admin|wp-login|admin|phpmyadmin|cpanel|webmail)) {
            return 500 "Service Temporarily Unavailable";
        }

        # Rate limiting for general requests
        limit_req zone=general burst=20 nodelay;

        # Main location
        location / {
            try_files $uri $uri/ =404;
        }

        location ^~ /classes/ { deny all; return 403; }

        # Block access to PHP include/config files
        location ~ ^/(autoload|config|settings)\.php$ {
            deny all;
            return 403;
        }

        # Block access to backup and temporary files
        location ~ \.(bak|backup|old|orig|save|tmp|temp|swp|swo)$ {
            deny all;
            return 403;
        }

        location ~ ^(?!/classes/).*\.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass php-fpm:9000;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
        }

        # Cache static assets
        location ~* \.(css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            try_files $uri =404;
        }

        # Handle favicon requests
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        # Handle robots.txt
        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }

        location ~ /\.(?!well-known) {
            deny all;
        }


        # Block common exploit attempts
        location ~* \.(sql|bak|backup|old|orig|save|tmp|temp)$ {
            return 403;
        }

        # Block access to sensitive files
        location ~* \.(htaccess|htpasswd|ini|log|sh|sql|conf|config)$ {
            return 403;
        }

        # Error pages
        error_page 404 /404.php;
        error_page 500 502 503 504 /index.php;
    }
}
